server {
        listen 80;
        server_name test.hk.com;
        root /var/www/html;
        index index.html index.htm;

        location /lua_content {
                default_type 'text/plain';
                content_by_lua_block {
                        ngx.say('Hello, world!')
                }
        }
        location /nginx_var {
                default_type 'text/plain';
                content_by_lua_block {
                        ngx.say(ngx.var.arg_a)
                }
        }
        location = /request_body {
             client_max_body_size 50k;
             client_body_buffer_size 50k;

             content_by_lua_block {
                 ngx.req.read_body()  -- explicitly read the req body
                 local data = ngx.req.get_body_data()
                 if data then
                     ngx.say("body data:")
                     ngx.print(data)
                     return
                 end

                 -- body may get buffered in a temp file:
                 local file = ngx.req.get_body_file()
                 if file then
                     ngx.say("body is in file ", file)
                 else
                     ngx.say("no body found")
                 end
             }
        }
        location = /lua {
             # MIME type determined by default_type:
             default_type 'text/plain';

             content_by_lua_block {
                 local res = ngx.location.capture("/lua_content")
                 if res then
                     ngx.say("status: ", res.status)
                     ngx.say("body:")
                     ngx.print(res.body)
                 end
             }
         }

        location /test {
                default_type text/html;
                content_by_lua_block {
                        local redis = require "resty.redis"
                        local red = redis:new()
                        local ok, err = red:connect("127.0.0.1", 6379)
                        if not ok then
                            ngx.say("failed to connect: ", err)
                            return
                        end

                        ok, err = red:set("dog", "an animal")
                        if not ok then
                            ngx.say("failed to set dog: ", err)
                            return
                        end
                        ngx.say("<p>set result</p> ", red:get('dog'));

                }

        }
        location /limit {
            if ($request_uri ~ .*\.(html|htm|jsp|json)) {
                set $business "H5";
                access_by_lua_file access.lua;
            }
            default_type text/html;
            content_by_lua_block {
                ngx.say('Hello, guangzhou!')
            }

        }
}